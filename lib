local KnrlN = {}

function KnrlN:CreateWindow(title)
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = title or "KnrlN_UI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game:GetService("CoreGui")

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 500, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -250, 0.5, -175)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame

    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.85
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.Position = UDim2.new(0, -20, 0, -20)
    shadow.ZIndex = 0
    shadow.Parent = mainFrame

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 45)
    titleBar.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -20, 1, 0)
    titleLabel.Position = UDim2.new(0, 20, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "KnrlN UI"
    titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 28
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 1, -45)
    container.Position = UDim2.new(0, 0, 0, 45)
    container.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    container.Parent = mainFrame

    local cornerCont = Instance.new("UICorner")
    cornerCont.CornerRadius = UDim.new(0, 12)
    cornerCont.Parent = container

    local sidebar = Instance.new("ScrollingFrame")
    sidebar.Size = UDim2.new(0, 140, 1, 0)
    sidebar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    sidebar.BorderSizePixel = 0
    sidebar.ScrollBarThickness = 6
    sidebar.Parent = container

    local cornerSide = Instance.new("UICorner")
    cornerSide.CornerRadius = UDim.new(0, 12)
    cornerSide.Parent = sidebar

    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Padding = UDim.new(0, 10)
    tabListLayout.Parent = sidebar

    sidebar.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0, 0, 0, tabListLayout.AbsoluteContentSize.Y + 20)
    end)

    local contentArea = Instance.new("Frame")
    contentArea.Size = UDim2.new(1, -140, 1, 0)
    contentArea.Position = UDim2.new(0, 140, 0, 0)
    contentArea.BackgroundTransparency = 1
    contentArea.Parent = container

    local tabs = {}
    local tabButtons = {}

    local elements = {}

    -- Helper function for smooth color tween
    local TweenService = game:GetService("TweenService")
    local function tweenColor(instance, prop, goalColor)
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(instance, tweenInfo, {[prop] = goalColor})
        tween:Play()
    end

    function elements:AddTab(tabName)
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, -20, 0, 45)
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        tabButton.BorderSizePixel = 0
        tabButton.Text = tabName or "Tab"
        tabButton.TextColor3 = Color3.fromRGB(180, 180, 180)
        tabButton.Font = Enum.Font.GothamSemibold
        tabButton.TextSize = 20
        tabButton.AutoButtonColor = false
        tabButton.Parent = sidebar
        tabButton.LayoutOrder = #tabButtons + 1

        local cornerBtn = Instance.new("UICorner")
        cornerBtn.CornerRadius = UDim.new(0, 10)
        cornerBtn.Parent = tabButton

        local leftIndicator = Instance.new("Frame")
        leftIndicator.Size = UDim2.new(0, 5, 1, 0)
        leftIndicator.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        leftIndicator.Visible = false
        leftIndicator.Parent = tabButton

        local function setActive(active)
            if active then
                tweenColor(tabButton, "BackgroundColor3", Color3.fromRGB(0, 100, 180))
                tweenColor(tabButton, "TextColor3", Color3.fromRGB(255, 255, 255))
                leftIndicator.Visible = true
            else
                tweenColor(tabButton, "BackgroundColor3", Color3.fromRGB(40, 40, 40))
                tweenColor(tabButton, "TextColor3", Color3.fromRGB(180, 180, 180))
                leftIndicator.Visible = false
            end
        end

        tabButton.MouseEnter:Connect(function()
            if not leftIndicator.Visible then
                tweenColor(tabButton, "BackgroundColor3", Color3.fromRGB(50, 50, 50))
            end
        end)

        tabButton.MouseLeave:Connect(function()
            if not leftIndicator.Visible then
                tweenColor(tabButton, "BackgroundColor3", Color3.fromRGB(40, 40, 40))
            end
        end)

        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        tabContent.BorderSizePixel = 0
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.ScrollBarThickness = 8
        tabContent.Visible = false
        tabContent.Parent = contentArea

        local tabContentLayout = Instance.new("UIListLayout")
        tabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabContentLayout.Padding = UDim.new(0, 12)
        tabContentLayout.Parent = tabContent

        tabContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContentLayout.AbsoluteContentSize.Y + 20)
        end)

        local tabElements = {}

        -- Button element
        function tabElements:AddButton(text, callback)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0.9, 0, 0, 45)
            button.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
            button.BorderSizePixel = 0
            button.Text = text or "Button"
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Font = Enum.Font.GothamSemibold
            button.TextSize = 20
            button.AutoButtonColor = false
            button.Parent = tabContent

            local btnCorner = Instance.new("UICorner")
            btnCorner.CornerRadius = UDim.new(0, 10)
            btnCorner.Parent = button

            button.MouseEnter:Connect(function()
                tweenColor(button, "BackgroundColor3", Color3.fromRGB(0, 100, 220))
            end)
            button.MouseLeave:Connect(function()
                tweenColor(button, "BackgroundColor3", Color3.fromRGB(0, 120, 255))
            end)

            button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)

            return button
        end

        -- Toggle element
        function tabElements:AddToggle(text, default, callback)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Size = UDim2.new(0.9, 0, 0, 40)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = tabContent

            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Size = UDim2.new(1, -50, 1, 0)
            toggleLabel.Position = UDim2.new(0, 10, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = text or "Toggle"
            toggleLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
            toggleLabel.Font = Enum.Font.GothamSemibold
            toggleLabel.TextSize = 20
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.Parent = toggleFrame

            local toggleButton = Instance.new("TextButton")
            toggleButton.Size = UDim2.new(0, 35, 0, 20)
            toggleButton.Position = UDim2.new(1, -45, 0.5, -10)
            toggleButton.BackgroundColor3 = default and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 60)
            toggleButton.BorderSizePixel = 0
            toggleButton.AutoButtonColor = false
            toggleButton.Parent = toggleFrame

            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(0, 8)
            toggleCorner.Parent = toggleButton

            local toggled = default or false

            toggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                toggleButton.BackgroundColor3 = toggled and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 60)
                if callback then
                    callback(toggled)
                end
            end)

            toggleButton.MouseEnter:Connect(function()
                if not toggled then
                    tweenColor(toggleButton, "BackgroundColor3", Color3.fromRGB(80, 80, 80))
                end
            end)

            toggleButton.MouseLeave:Connect(function()
                if not toggled then
                    tweenColor(toggleButton, "BackgroundColor3", Color3.fromRGB(60, 60, 60))
                end
            end)

            return toggleButton
        end

        -- Dropdown element
        function tabElements:AddDropdown(text, options, callback)
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Size = UDim2.new(0.9, 0, 0, 40)
            dropdownFrame.BackgroundTransparency = 1
            dropdownFrame.Parent = tabContent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -30, 1, 0)
            label.Position = UDim2.new(0, 10, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = text or "Dropdown"
            label.TextColor3 = Color3.fromRGB(230, 230, 230)
            label.Font = Enum.Font.GothamSemibold
            label.TextSize = 20
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = dropdownFrame

            local dropButton = Instance.new("TextButton")
            dropButton.Size = UDim2.new(0, 25, 0, 25)
            dropButton.Position = UDim2.new(1, -30, 0.5, -12)
            dropButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            dropButton.BorderSizePixel = 0
            dropButton.Text = "▼"
            dropButton.TextColor3 = Color3.fromRGB(180, 180, 180)
            dropButton.Font = Enum.Font.Gotham
            dropButton.TextSize = 18
            dropButton.Parent = dropdownFrame

            local optionsFrame = Instance.new("ScrollingFrame")
            optionsFrame.Size = UDim2.new(0.9, 0, 0, 0)
            optionsFrame.Position = UDim2.new(0, 0, 1, 5)
            optionsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            optionsFrame.BorderSizePixel = 0
            optionsFrame.Visible = false
            optionsFrame.ClipsDescendants = true
            optionsFrame.Parent = dropdownFrame

            local optionsLayout = Instance.new("UIListLayout")
            optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
            optionsLayout.Padding = UDim.new(0, 5)
            optionsLayout.Parent = optionsFrame

            optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                optionsFrame.Size = UDim2.new(0.9, 0, 0, math.min(optionsLayout.AbsoluteContentSize.Y + 10, 150))
            end)

            local selected = nil

            local function closeDropdown()
                optionsFrame.Visible = false
                dropButton.Text = "▼"
            end

            dropButton.MouseButton1Click:Connect(function()
                optionsFrame.Visible = not optionsFrame.Visible
                dropButton.Text = optionsFrame.Visible and "▲" or "▼"
            end)

            for i, option in ipairs(options or {}) do
                local optionButton = Instance.new("TextButton")
                optionButton.Size = UDim2.new(1, 0, 0, 30)
                optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                optionButton.BorderSizePixel = 0
                optionButton.Text = option
                optionButton.TextColor3 = Color3.fromRGB(220, 220, 220)
                optionButton.Font = Enum.Font.Gotham
                optionButton.TextSize = 18
                optionButton.Parent = optionsFrame

                local optionCorner = Instance.new("UICorner")
                optionCorner.CornerRadius = UDim.new(0, 6)
                optionCorner.Parent = optionButton

                optionButton.MouseEnter:Connect(function()
                    tweenColor(optionButton, "BackgroundColor3", Color3.fromRGB(90, 90, 90))
                end)

                optionButton.MouseLeave:Connect(function()
                    tweenColor(optionButton, "BackgroundColor3", Color3.fromRGB(60, 60, 60))
                end)

                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    label.Text = text .. ": " .. option
                    if callback then
                        callback(option)
                    end
                    closeDropdown()
                end)
            end

            return dropdownFrame
        end

        -- ColorPicker element
        function tabElements:AddColorPicker(text, defaultColor, callback)
            local colorFrame = Instance.new("Frame")
            colorFrame.Size = UDim2.new(0.9, 0, 0, 40)
            colorFrame.BackgroundTransparency = 1
            colorFrame.Parent = tabContent

            local colorLabel = Instance.new("TextLabel")
            colorLabel.Size = UDim2.new(1, -60, 1, 0)
            colorLabel.Position = UDim2.new(0, 10, 0, 0)
            colorLabel.BackgroundTransparency = 1
            colorLabel.Text = text or "Color Picker"
            colorLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
            colorLabel.Font = Enum.Font.GothamSemibold
            colorLabel.TextSize = 20
            colorLabel.TextXAlignment = Enum.TextXAlignment.Left
            colorLabel.Parent = colorFrame

            local colorButton = Instance.new("TextButton")
            colorButton.Size = UDim2.new(0, 35, 0, 35)
            colorButton.Position = UDim2.new(1, -45, 0.5, -17)
            colorButton.BackgroundColor3 = defaultColor or Color3.fromRGB(255, 0, 0)
            colorButton.BorderSizePixel = 0
            colorButton.AutoButtonColor = false
            colorButton.Parent = colorFrame

            local colorCorner = Instance.new("UICorner")
            colorCorner.CornerRadius = UDim.new(0, 8)
            colorCorner.Parent = colorButton

            local pickerOpen = false

            local pickerFrame = Instance.new("Frame")
            pickerFrame.Size = UDim2.new(0, 220, 0, 220)
            pickerFrame.Position = UDim2.new(0.5, -110, 0.5, -110)
            pickerFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            pickerFrame.BorderSizePixel = 0
            pickerFrame.Visible = false
            pickerFrame.ClipsDescendants = true
            pickerFrame.Parent = mainFrame
            pickerFrame.ZIndex = 10

            local pickerCorner = Instance.new("UICorner")
            pickerCorner.CornerRadius = UDim.new(0, 12)
            pickerCorner.Parent = pickerFrame

            -- Saturation/Value square
            local svSquare = Instance.new("ImageLabel")
            svSquare.Size = UDim2.new(0, 180, 0, 180)
            svSquare.Position = UDim2.new(0, 10, 0, 10)
            svSquare.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
            svSquare.BorderSizePixel = 0
            svSquare.Image = "rbxassetid://4155801252"
            svSquare.Parent = pickerFrame

            -- Hue slider bar
            local hueSlider = Instance.new("Frame")
            hueSlider.Size = UDim2.new(0, 15, 0, 180)
            hueSlider.Position = UDim2.new(0, 200, 0, 10)
            hueSlider.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
            hueSlider.BorderSizePixel = 0
            hueSlider.Parent = pickerFrame

            local hueSliderCorner = Instance.new("UICorner")
            hueSliderCorner.CornerRadius = UDim.new(0, 8)
            hueSliderCorner.Parent = hueSlider

            local hueIndicator = Instance.new("Frame")
            hueIndicator.Size = UDim2.new(1, 0, 0, 4)
            hueIndicator.Position = UDim2.new(0, 0, 0, 0)
            hueIndicator.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            hueIndicator.BorderSizePixel = 0
            hueIndicator.Parent = hueSlider

            local svIndicator = Instance.new("Frame")
            svIndicator.Size = UDim2.new(0, 10, 0, 10)
            svIndicator.Position = UDim2.new(1, -10, 0, 0)
            svIndicator.BackgroundColor3 = Color3.new(1, 1, 1)
            svIndicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
            svIndicator.BorderSizePixel = 2
            svIndicator.Parent = svSquare

            svIndicator.AnchorPoint = Vector2.new(0.5, 0.5)

            -- Current HSV values
            local hue, saturation, value = 0, 1, 1

            local function updateSVSquare()
                svSquare.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
            end

            local function updateColor()
                local col = Color3.fromHSV(hue, saturation, value)
                colorButton.BackgroundColor3 = col
                if callback then
                    callback(col)
                end
            end

            -- Input tracking
            local draggingHue = false
            local draggingSV = false

            local function onInputChanged(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement or
                   input.UserInputType == Enum.UserInputType.Touch then
                    local mousePos = Vector2.new(input.Position.X, input.Position.Y)
                    if draggingHue then
                        local relativeY = math.clamp(mousePos.Y - hueSlider.AbsolutePosition.Y, 0, hueSlider.AbsoluteSize.Y)
                        hue = 1 - (relativeY / hueSlider.AbsoluteSize.Y)
                        hue = math.clamp(hue, 0, 1)
                        hueIndicator.Position = UDim2.new(0, 0, 1 - hue, -2)
                        updateSVSquare()
                        updateColor()
                    elseif draggingSV then
                        local relativePos = mousePos - Vector2.new(svSquare.AbsolutePosition.X, svSquare.AbsolutePosition.Y)
                        saturation = math.clamp(relativePos.X / svSquare.AbsoluteSize.X, 0, 1)
                        value = 1 - math.clamp(relativePos.Y / svSquare.AbsoluteSize.Y, 0, 1)
                        svIndicator.Position = UDim2.new(saturation, 0, 1 - value, 0)
                        updateColor()
                    end
                end
            end

            hueSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingHue = true
                    onInputChanged(input)
                end
            end)

            hueSlider.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingHue = false
                end
            end)

            svSquare.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingSV = true
                    onInputChanged(input)
                end
            end)

            svSquare.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingSV = false
                end
            end)

            game:GetService("UserInputService").InputChanged:Connect(onInputChanged)

            -- Open/close picker
            colorButton.MouseButton1Click:Connect(function()
                pickerOpen = not pickerOpen
                pickerFrame.Visible = pickerOpen
            end)

            -- Click outside to close
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if pickerOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local mousePos = UserInputService:GetMouseLocation()
                    local absPos = pickerFrame.AbsolutePosition
                    local absSize = pickerFrame.AbsoluteSize
                    if not (mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and
                            mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y) then
                        pickerOpen = false
                        pickerFrame.Visible = false
                    end
                end
            end)

            return colorButton
        end

        tabs[#tabs+1] = tabContent
        tabButtons[#tabButtons+1] = tabButton

        tabButton.MouseButton1Click:Connect(function()
            for i, t in ipairs(tabs) do
                t.Visible = false
                setActive(false)
            end
            tabContent.Visible = true
            setActive(true)
        end)

        -- Activate first tab automatically if first tab added
        if #tabButtons == 1 then
            tabButton:MouseButton1Click()
        end

        return tabElements
    end

    elements.AddTab = function(...) return elements:AddTab(...) end

    return elements
end

return KnrlN
