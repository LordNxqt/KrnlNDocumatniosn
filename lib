local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local Krnllib = {}
Krnllib.__index = Krnllib

local function tweenObject(obj, properties, time, style, direction)
    style = style or Enum.EasingStyle.Quad
    direction = direction or Enum.EasingDirection.Out
    local tweenInfo = TweenInfo.new(time or 0.3, style, direction)
    local tween = TweenService:Create(obj, tweenInfo, properties)
    tween:Play()
    return tween
end

local function makeDraggable(frame)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

local function removeOldGUIs()
    for _, gui in ipairs(game:GetService("CoreGui"):GetChildren()) do
        if gui.Name == "KrnllibGUI" then
            gui:Destroy()
        end
    end
end

function Krnllib.new()
    removeOldGUIs()

    local self = setmetatable({}, Krnllib)

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "KrnllibGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game:GetService("CoreGui")
    self.ScreenGui = screenGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 450, 0, 350)
    mainFrame.Position = UDim2.new(0.5, -225, 0.5, -175)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.Parent = screenGui
    self.MainFrame = mainFrame

    makeDraggable(mainFrame)

    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, 0, 0, 40)
    tabContainer.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = mainFrame
    self.TabContainer = tabContainer

    local contentFrame = Instance.new("Frame")
    contentFrame.Position = UDim2.new(0, 0, 0, 40)
    contentFrame.Size = UDim2.new(1, 0, 1, -40)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    self.ContentFrame = contentFrame

    self.Tabs = {}
    self.CurrentTab = nil

    return self
end

function Krnllib:SetCurrentTab(index)
    for i, tab in ipairs(self.Tabs) do
        local selected = i == index
        tab.Button.BackgroundColor3 = selected and Color3.fromRGB(60, 60, 90) or Color3.fromRGB(40, 40, 50)
        tab.Content.Visible = selected
    end
    self.CurrentTab = index
end

function Krnllib:AddTab(title)
    local tabIndex = #self.Tabs + 1
    local tabButton = Instance.new("TextButton")
    tabButton.Text = title
    tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    tabButton.BorderSizePixel = 0
    tabButton.TextColor3 = Color3.fromRGB(180, 180, 200)
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = 14
    tabButton.Size = UDim2.new(0, 120, 1, 0)
    tabButton.Position = UDim2.new(0, 120 * (tabIndex - 1), 0, 0)
    tabButton.Parent = self.TabContainer

    local tabContent = Instance.new("Frame")
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = false
    tabContent.Parent = self.ContentFrame

    tabButton.MouseButton1Click:Connect(function()
        self:SetCurrentTab(tabIndex)
    end)

    local tabData = {
        Button = tabButton,
        Content = tabContent,
        Items = {}
    }

    table.insert(self.Tabs, tabData)

    if #self.Tabs == 1 then
        self:SetCurrentTab(1)
    end

    local function addLabel(text)
        local label = Instance.new("TextLabel")
        label.Text = text
        label.TextColor3 = Color3.fromRGB(220, 220, 230)
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, -20, 0, 20)
        label.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 30 + 10)
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = tabContent
        table.insert(tabData.Items, label)
        return label
    end

    local function addButton(text, callback)
        local btn = Instance.new("TextButton")
        btn.Text = text
        btn.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
        btn.BorderSizePixel = 0
        btn.TextColor3 = Color3.fromRGB(230, 230, 240)
        btn.Font = Enum.Font.GothamBold
        btn.TextSize = 15
        btn.Size = UDim2.new(1, -20, 0, 30)
        btn.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 35 + 10)
        btn.Parent = tabContent

        btn.MouseEnter:Connect(function()
            tweenObject(btn, {BackgroundColor3 = Color3.fromRGB(90, 90, 120)}, 0.2)
        end)
        btn.MouseLeave:Connect(function()
            tweenObject(btn, {BackgroundColor3 = Color3.fromRGB(70, 70, 90)}, 0.2)
        end)

        btn.MouseButton1Click:Connect(function()
            if callback then
                callback()
            end
        end)

        table.insert(tabData.Items, btn)
        return btn
    end

    local function addToggle(text, default, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, 30)
        frame.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 35 + 10)
        frame.BackgroundTransparency = 1
        frame.Parent = tabContent

        local label = Instance.new("TextLabel")
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 15
        label.TextColor3 = Color3.fromRGB(220, 220, 230)
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.8, 0, 1, 0)
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame

        local toggleButton = Instance.new("Frame")
        toggleButton.Size = UDim2.new(0, 40, 0, 20)
        toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        toggleButton.Position = UDim2.new(0.85, 0, 0.15, 0)
        toggleButton.AnchorPoint = Vector2.new(0, 0)
        toggleButton.Parent = frame
        toggleButton.BorderSizePixel = 0
        toggleButton.ClipsDescendants = true

        local circle = Instance.new("Frame")
        circle.Size = UDim2.new(0, 18, 0, 18)
        circle.Position = default and UDim2.new(1, -18, 0.5, -9) or UDim2.new(0, 0, 0.5, -9)
        circle.BackgroundColor3 = Color3.fromRGB(230, 230, 240)
        circle.Parent = toggleButton
        circle.AnchorPoint = Vector2.new(default and 1 or 0, 0.5)
        circle.BorderSizePixel = 0
        circle.ZIndex = 2

        local toggled = default or false

        local function updateToggle(value)
            toggled = value
            if toggled then
                tweenObject(circle, {Position = UDim2.new(1, -18, 0.5, -9)}, 0.2)
                tweenObject(toggleButton, {BackgroundColor3 = Color3.fromRGB(100, 180, 120)}, 0.2)
            else
                tweenObject(circle, {Position = UDim2.new(0, 0, 0.5, -9)}, 0.2)
                tweenObject(toggleButton, {BackgroundColor3 = Color3.fromRGB(60, 60, 80)}, 0.2)
            end
            if callback then callback(toggled) end
        end

        toggleButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateToggle(not toggled)
            end
        end)

        updateToggle(toggled)
        table.insert(tabData.Items, frame)

        return {
            Frame = frame,
            Get = function() return toggled end,
            Set = function(val) updateToggle(val) end,
        }
    end

    local function addDropdown(text, options, default, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, 30)
        frame.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 35 + 10)
        frame.BackgroundTransparency = 1
        frame.Parent = tabContent

        local label = Instance.new("TextLabel")
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 15
        label.TextColor3 = Color3.fromRGB(220, 220, 230)
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.5, 0, 1, 0)
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame

        local dropdownBtn = Instance.new("TextButton")
        dropdownBtn.Text = default or (options[1] or "Select")
        dropdownBtn.Font = Enum.Font.Gotham
        dropdownBtn.TextSize = 14
        dropdownBtn.TextColor3 = Color3.fromRGB(220, 220, 230)
        dropdownBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        dropdownBtn.BorderSizePixel = 0
        dropdownBtn.Size = UDim2.new(0, 140, 1, 0)
        dropdownBtn.Position = UDim2.new(0.5, 0, 0, 0)
        dropdownBtn.Parent = frame

        local dropdownOpen = false

        local dropdownList = Instance.new("Frame")
        dropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        dropdownList.BorderSizePixel = 0
        dropdownList.Size = UDim2.new(0, 140, 0, 0)
        dropdownList.Position = UDim2.new(0.5, 0, 1, 0)
        dropdownList.ClipsDescendants = true
        dropdownList.Parent = frame
        dropdownList.Visible = false

        local uiListLayout = Instance.new("UIListLayout")
        uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uiListLayout.Parent = dropdownList

        local selectedIndex = 1
        for i, option in ipairs(options) do
            local optionBtn = Instance.new("TextButton")
            optionBtn.Text = option
            optionBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
            optionBtn.BorderSizePixel = 0
            optionBtn.TextColor3 = Color3.fromRGB(220, 220, 230)
            optionBtn.Font = Enum.Font.Gotham
            optionBtn.TextSize = 14
            optionBtn.Size = UDim2.new(1, 0, 0, 30)
            optionBtn.Parent = dropdownList

            optionBtn.MouseEnter:Connect(function()
                tweenObject(optionBtn, {BackgroundColor3 = Color3.fromRGB(90, 90, 120)}, 0.15)
            end)
            optionBtn.MouseLeave:Connect(function()
                tweenObject(optionBtn, {BackgroundColor3 = Color3.fromRGB(60, 60, 80)}, 0.15)
            end)

            optionBtn.MouseButton1Click:Connect(function()
                dropdownBtn.Text = option
                selectedIndex = i
                if callback then
                    callback(option, i)
                end
                dropdownOpen = false
                tweenObject(dropdownList, {Size = UDim2.new(0, 140, 0, 0)}, 0.25)
                task.delay(0.25, function()
                    dropdownList.Visible = false
                end)
            end)
        end

        dropdownBtn.MouseButton1Click:Connect(function()
            dropdownOpen = not dropdownOpen
            if dropdownOpen then
                dropdownList.Visible = true
                local itemCount = #options
                tweenObject(dropdownList, {Size = UDim2.new(0, 140, 0, itemCount * 30)}, 0.25)
            else
                tweenObject(dropdownList, {Size = UDim2.new(0, 140, 0, 0)}, 0.25)
                task.delay(0.25, function()
                    dropdownList.Visible = false
                end)
            end
        end)

        table.insert(tabData.Items, frame)

        return {
            Frame = frame,
            Get = function() return options[selectedIndex] end,
            Set = function(val)
                for i, v in ipairs(options) do
                    if v == val then
                        selectedIndex = i
                        dropdownBtn.Text = val
                        if callback then callback(val, i) end
                        break
                    end
                end
            end,
        }
    end

    local function addBind(text, defaultKey, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, 30)
        frame.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 35 + 10)
        frame.BackgroundTransparency = 1
        frame.Parent = tabContent

        local label = Instance.new("TextLabel")
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 15
        label.TextColor3 = Color3.fromRGB(220, 220, 230)
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.7, 0, 1, 0)
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame

        local keyLabel = Instance.new("TextButton")
        keyLabel.Text = defaultKey.Name or tostring(defaultKey)
        keyLabel.Font = Enum.Font.Gotham
        keyLabel.TextSize = 14
        keyLabel.TextColor3 = Color3.fromRGB(220, 220, 230)
        keyLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        keyLabel.BorderSizePixel = 0
        keyLabel.Size = UDim2.new(0, 80, 1, 0)
        keyLabel.Position = UDim2.new(0.75, 0, 0, 0)
        keyLabel.Parent = frame

        local binding = defaultKey
        local listening = false

        local function onInputBegan(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                binding = input.KeyCode
                keyLabel.Text = binding.Name
                listening = false
                if callback then
                    callback(binding)
                end
            end
        end

        keyLabel.MouseButton1Click:Connect(function()
            if listening then return end
            listening = true
            keyLabel.Text = "Press key..."
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, processed)
                if not processed then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        onInputBegan(input)
                        connection:Disconnect()
                    end
                end
            end)
        end)

        table.insert(tabData.Items, frame)

        return {
            Frame = frame,
            Get = function() return binding end,
            Set = function(key) 
                binding = key
                keyLabel.Text = binding.Name or tostring(binding)
                if callback then callback(binding) end
            end,
        }
    end

    local function addBindToggle(text, defaultKey, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, 30)
        frame.Position = UDim2.new(0, 10, 0, (#tabData.Items) * 35 + 10)
        frame.BackgroundTransparency = 1
        frame.Parent = tabContent

        local label = Instance.new("TextLabel")
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 15
        label.TextColor3 = Color3.fromRGB(220, 220, 230)
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.45, 0, 1, 0)
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame

        local keyLabel = Instance.new("TextButton")
        keyLabel.Text = defaultKey.Name or tostring(defaultKey)
        keyLabel.Font = Enum.Font.Gotham
        keyLabel.TextSize = 14
        keyLabel.TextColor3 = Color3.fromRGB(220, 220, 230)
        keyLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        keyLabel.BorderSizePixel = 0
        keyLabel.Size = UDim2.new(0, 80, 1, 0)
        keyLabel.Position = UDim2.new(0.5, 0, 0, 0)
        keyLabel.Parent = frame

        local toggleButton = Instance.new("Frame")
        toggleButton.Size = UDim2.new(0, 40, 0, 20)
        toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        toggleButton.Position = UDim2.new(0.85, 0, 0.15, 0)
        toggleButton.AnchorPoint = Vector2.new(0, 0)
        toggleButton.Parent = frame
        toggleButton.BorderSizePixel = 0
        toggleButton.ClipsDescendants = true

        local circle = Instance.new("Frame")
        circle.Size = UDim2.new(0, 18, 0, 18)
        circle.Position = UDim2.new(0, 0, 0.5, -9)
        circle.BackgroundColor3 = Color3.fromRGB(230, 230, 240)
        circle.Parent = toggleButton
        circle.AnchorPoint = Vector2.new(0, 0.5)
        circle.BorderSizePixel = 0
        circle.ZIndex = 2

        local binding = defaultKey
        local toggled = false
        local listening = false

        local function updateToggle(value)
            toggled = value
            if toggled then
                tweenObject(circle, {Position = UDim2.new(1, -18, 0.5, -9)}, 0.2)
                tweenObject(toggleButton, {BackgroundColor3 = Color3.fromRGB(100, 180, 120)}, 0.2)
            else
                tweenObject(circle, {Position = UDim2.new(0, 0, 0.5, -9)}, 0.2)
                tweenObject(toggleButton, {BackgroundColor3 = Color3.fromRGB(60, 60, 80)}, 0.2)
            end
        end

        keyLabel.MouseButton1Click:Connect(function()
            if listening then return end
            listening = true
            keyLabel.Text = "Press key..."
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, processed)
                if not processed then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        binding = input.KeyCode
                        keyLabel.Text = binding.Name
                        listening = false
                        connection:Disconnect()
                    end
                end
            end)
        end)

        UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == binding then
                updateToggle(not toggled)
                if callback then
                    callback(toggled)
                end
            end
        end)

        updateToggle(toggled)

        table.insert(tabData.Items, frame)

        return {
            Frame = frame,
            GetBind = function() return binding end,
            SetBind = function(key) 
                binding = key
                keyLabel.Text = binding.Name or tostring(binding)
            end,
            GetToggle = function() return toggled end,
            SetToggle = function(val) 
                updateToggle(val)
            end,
        }
    end

    self.AddLabel = addLabel
    self.AddButton = addButton
    self.AddToggle = addToggle
    self.AddDropdown = addDropdown
    self.AddBind = addBind
    self.AddBindToggle = addBindToggle

    return self
end

return Krnllib
